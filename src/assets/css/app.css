/*
@styleguide

@title Logo

![logo](../assets/img/logo_color.png)
`assets/img/logo-color.png`<br>
This is the __*brettlguide.at logo*__. It consists of the mountain in sky-blue and the lettering BRETTLGuide. Only use it when it can be displayed at least 45px tall, in order to keep the text readable.

[Download .svg](logo_color.svg) | [Download .png](logo_color.png)




![logo](../assets/img/logo_icon.png)
`assets/img/logo-icon.png`<br>
For smaller sizes use the icon only.

[Download .svg](logo_color.svg) | [Download .png](logo_icon.png)

*/
@import "reset";
@import "color";
@import "typo";
@import "structure";

/*
@styleguide

@title Methodology
## Code style rules
### Block indentation
Each time a new block or block-like construct is opened, the indent increases by **_two spaces_**. When the block ends, the indent returns to the previous indent level. The indent level applies to both code and comments throughout the block.

### Color Variables
Each color that is used more than once should be placed in a variable in `color.css`.

### File structure
```
app/
├── assets/
│   └── css
│       ├── app.css
│       ├── color.css
│       ├── components.css
│       └── typo.css
└── build/
    ├── assets
    │   └── css
    │       └── app.min.css
    ├── styleguide
    │   └── index.html
    └── index.html

```

### Preprocessor
As a preprocessor we use [postcss](http://postcss.org/). PostCSS is a tool for transforming styles with JS plugins. These plugins can lint your CSS, support variables and mixins, transpile future CSS syntax, inline images, and more.

**Postcss plugins we use** <br><br>
[autoprefixer](https://github.com/postcss/autoprefixer)<br>
to add vendor prefixes, using data from Can I Use

[postcss custom properties](https://github.com/postcss/postcss-custom-properties)<br>
to transform CSS Custom Properties (CSS variables) syntax into a static representation

[postcss import](https://github.com/postcss/postcss-import)<br>
to consume local files, node modules or web_modules

[postcss style-guide](https://github.com/mdings/postcss-styleguide)<br>
to create a styleguide from YAML-structured CSS-comments.

[postcss nested](https://github.com/postcss/postcss-nested)<br>
to unwrap nested rules like how Sass does it.

## Class naming conventions
To make sure our CSS is structured we use the _**BEM naming convention**_. The BEM naming convention distinguishes between blocks, elements and modifiers.

_**Blocks**_ are independet and named with a short class name

	<div class="site-search">...</div>

_**Elements**_ are parts of blocks and can't be used by themselves
```html
<div class="site-search">
    <input type="text" class="site-search__field">
    <input type="Submit" value ="Search" class="site-search__button">
</div>
```

_**Modifiers**_ change the look of blocks or elements
```html
<div class="site-search site-search--full">
    <input type="text" class="site-search__field">
    <input type="Submit" value ="Search" class="site-search__button">
</div>
```

*/
@import "components";
